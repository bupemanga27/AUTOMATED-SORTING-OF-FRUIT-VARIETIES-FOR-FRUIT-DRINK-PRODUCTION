import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
import os
from PIL import Image, ImageTk
import cv2
import tensorflow as tf

# Set up the main GUI window
root = tk.Tk()
root.title("Orange Freshness Prediction")

# Load the trained model
model = tf.keras.models.load_model('oranges-cnn.model')

# Define the image display function
def display_image(img_path):
    # Load and preprocess the image
    IMG_SIZE = 50
    img_array = cv2.imread(img_path)
    new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
    img_to_predict = new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 3) / 255.0

    # Predict the image
    prediction = model.predict(img_to_predict)
    is_rotten = prediction[0][1] >= 0.5

    # Load the image using PIL for better compatibility with Tkinter
    pil_image = Image.open(img_path).resize((200, 200))
    tk_image = ImageTk.PhotoImage(pil_image)

    # Update GUI elements
    image_label.config(image=tk_image)
    image_label.image = tk_image  # Keep a reference to avoid garbage collection
    image_label.pack()
    pred_label.config(text="ROTTEN" if is_rotten else "FRESH", bg="red" if is_rotten else "green")

# Function to handle browsing to the next image
def browse_image():
    global current_index, images, category
    current_index = (current_index + 1) % len(images)  # Loop back to the start
    img_path = os.path.join(TRAIN_DIR, category, images[current_index])
    display_image(img_path)

# Set the category and image list
category = "rottenoranges"
path = os.path.join(TRAIN_DIR, category)
images = os.listdir(path)
current_index = -1  # Start before the first image

# GUI Widgets
image_label = tk.Label(root)
image_label.pack()

pred_label = tk.Label(root, text="", font=("Helvetica", 16))
pred_label.pack()

next_button = tk.Button(root, text="Next Image", command=browse_image)
next_button.pack()

# Start the GUI loop after displaying the first image
browse_image()

root.mainloop()
